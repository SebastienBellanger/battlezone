// Generated by CoffeeScript 1.9.1
(function() {
  var AxisModel, BackgroundHorizonModel, BackgroundMountainsModel, BattleZone, BulletModel, BulletNode, GRAVITY, Hud, MOVESPEED, Matrix3, Matrix4, Model, ModelLoader, Models, Node, OrthoProjection, Pipeline, Projection, Quaternion, ROTATIONSPEED, Renderer, Sphere, TankBodyModel, TankChunkNode, TankNode, TankRadarModel, Tester, Transform, Vector3, Vector4, _barrelChunkData, _bodyChunkData, _chunkData, _sphereData, _tankRadarData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Matrix3 = (function() {
    function Matrix3() {
      this.v = new Array(9);
      this.identity();
    }

    Matrix3.prototype.set = function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {
      this.v[0] = v0;
      this.v[1] = v1;
      this.v[2] = v2;
      this.v[3] = v3;
      this.v[4] = v4;
      this.v[5] = v5;
      this.v[6] = v6;
      this.v[7] = v7;
      return this.v[8] = v8;
    };

    Matrix3.prototype.identity = function() {
      this.v[0] = 1;
      this.v[1] = 0;
      this.v[2] = 0;
      this.v[3] = 0;
      this.v[4] = 1;
      this.v[5] = 0;
      this.v[6] = 0;
      this.v[7] = 0;
      return this.v[8] = 1;
    };

    Matrix3.prototype.mul = function(matrix) {
      var c, fn, l, result;
      result = new Matrix4();
      fn = (function(_this) {
        return function(c) {
          var m, r, results;
          results = [];
          for (r = m = 0; m < 3; r = ++m) {
            results.push((function(r) {
              var i, n, results1;
              result.v[r + 3 * c] = 0;
              results1 = [];
              for (i = n = 0; n < 3; i = ++n) {
                results1.push((function(i) {
                  return result.v[r + 3 * c] += _this.v[r + 3 * i] * matrix.v[i + 3 * c];
                })(i));
              }
              return results1;
            })(r));
          }
          return results;
        };
      })(this);
      for (c = l = 0; l < 3; c = ++l) {
        fn(c);
      }
      return result;
    };

    Matrix3.prototype.setScaling = function(x, y, z) {
      this.identity();
      return this.scale(x, y, z);
    };

    Matrix3.prototype.scale = function(x, y, z) {
      this.v[0] *= x;
      this.v[5] *= y;
      return this.v[10] *= z;
    };

    Matrix3.prototype.scaleUniform = function(scalar) {
      return this.scale(scalar, scalar, scalar);
    };

    Matrix3.prototype.transform = function(vector) {
      return new Vector3(vector.x * this.v[0] + vector.y * this.v[3] + vector.z * this.v[6], vector.x * this.v[1] + vector.y * this.v[4] + vector.z * this.v[7], vector.x * this.v[2] + vector.y * this.v[5] + vector.z * this.v[8]);
    };

    Matrix3.prototype.toString = function() {
      return "Matrix3 [" + this.v[0] + "," + this.v[1] + "," + this.v[2] + "," + this.v[3] + "," + this.v[4] + "," + this.v[5] + "," + this.v[6] + "," + this.v[7] + "," + this.v[8] + "]";
    };

    return Matrix3;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Matrix3 = Matrix3;
  }

  Matrix4 = (function() {
    function Matrix4() {
      this.v = new Array(16);
      this.identity();
    }

    Matrix4.fromSet = function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
      var matrix;
      matrix = new Matrix4();
      matrix.v[0] = v0;
      matrix.v[1] = v1;
      matrix.v[2] = v2;
      matrix.v[3] = v3;
      matrix.v[4] = v4;
      matrix.v[5] = v5;
      matrix.v[6] = v6;
      matrix.v[7] = v7;
      matrix.v[8] = v8;
      matrix.v[9] = v9;
      matrix.v[10] = v10;
      matrix.v[11] = v11;
      matrix.v[12] = v12;
      matrix.v[13] = v13;
      matrix.v[14] = v14;
      matrix.v[15] = v15;
      return matrix;
    };

    Matrix4.prototype.set = function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
      this.v[0] = v0;
      this.v[1] = v1;
      this.v[2] = v2;
      this.v[3] = v3;
      this.v[4] = v4;
      this.v[5] = v5;
      this.v[6] = v6;
      this.v[7] = v7;
      this.v[8] = v8;
      this.v[9] = v9;
      this.v[10] = v10;
      this.v[11] = v11;
      this.v[12] = v12;
      this.v[13] = v13;
      this.v[14] = v14;
      return this.v[15] = v15;
    };

    Matrix4.prototype.identity = function() {
      this.v[0] = 1;
      this.v[1] = 0;
      this.v[2] = 0;
      this.v[3] = 0;
      this.v[4] = 0;
      this.v[5] = 1;
      this.v[6] = 0;
      this.v[7] = 0;
      this.v[8] = 0;
      this.v[9] = 0;
      this.v[10] = 1;
      this.v[11] = 0;
      this.v[12] = 0;
      this.v[13] = 0;
      this.v[14] = 0;
      return this.v[15] = 1;
    };

    Matrix4.prototype.mul = function(matrix) {
      var i, j, k, l, m, n, result;
      result = new Matrix4();
      for (i = l = 0; l < 16; i = l += 4) {
        for (j = m = 0; m < 4; j = ++m) {
          result.v[i + j] = 0;
          for (k = n = 0; n < 4; k = ++n) {
            result.v[i + j] += this.v[i + k] * matrix.v[k * 4 + j];
          }
        }
      }
      return result;
    };

    Matrix4.prototype.setTranslation = function(x, y, z) {
      this.identity();
      this.v[3] = x;
      this.v[7] = y;
      return this.v[11] = z;
    };

    Matrix4.prototype.setTranslationV = function(vector3) {
      this.identity();
      this.v[3] = vector3.x;
      this.v[7] = vector3.y;
      return this.v[11] = vector3.z;
    };

    Matrix4.prototype.translate = function(x, y, z) {
      this.v[3] += x;
      this.v[7] += y;
      return this.v[11] += z;
    };

    Matrix4.prototype.translateV = function(vector3) {
      this.v[3] += vector3.x;
      this.v[7] += vector3.y;
      return this.v[11] += vector3.z;
    };

    Matrix4.prototype.setScaling = function(x, y, z) {
      this.identity();
      return this.scale(x, y, z);
    };

    Matrix4.prototype.setScalingV = function(vector3) {
      this.identity();
      return this.scale(vector3.x, vector3.y, vector3.z);
    };

    Matrix4.prototype.scale = function(x, y, z) {
      this.v[0] *= x;
      this.v[5] *= y;
      return this.v[10] *= z;
    };

    Matrix4.prototype.scaleV = function(vector3) {
      return this.scale(vector3.x, vector3.y, vector3.z);
    };

    Matrix4.prototype.scaleUniform = function(scalar) {
      return this.scale(scalar, scalar, scalar);
    };

    Matrix4.prototype.transform = function(vector) {
      return new Vector4(vector.x * this.v[0] + vector.y * this.v[1] + vector.z * this.v[2] + vector.w * this.v[3], vector.x * this.v[4] + vector.y * this.v[5] + vector.z * this.v[6] + vector.w * this.v[7], vector.x * this.v[8] + vector.y * this.v[9] + vector.z * this.v[10] + vector.w * this.v[11], vector.x * this.v[12] + vector.y * this.v[13] + vector.z * this.v[14] + vector.w * this.v[15]);
    };

    Matrix4.prototype.transformVector3 = function(vector3) {
      var transformedVector;
      transformedVector = this.transform(Vector4.fromVector3(vector3, 1));
      return transformedVector.toVector3();
    };

    Matrix4.prototype.toString = function() {
      return "Matrix4 [" + this.v[0] + "," + this.v[1] + "," + this.v[2] + "," + this.v[3] + "," + this.v[4] + "," + this.v[5] + "," + this.v[6] + "," + this.v[7] + "," + this.v[8] + "," + this.v[9] + "," + this.v[10] + "," + this.v[11] + "," + this.v[12] + "," + this.v[13] + "," + this.v[14] + "," + this.v[15] + "]";
    };

    return Matrix4;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Matrix4 = Matrix4;
  }

  Quaternion = (function() {
    function Quaternion() {
      this.i = 0;
      this.j = 0;
      this.k = 0;
      this.r = 1;
    }

    Quaternion.fromSet = function(i, j, k, r) {
      var quat;
      quat = new Quaternion();
      quat.i = i;
      quat.j = j;
      quat.k = k;
      quat.r = r;
      return quat;
    };

    Quaternion.fromAxisAngle = function(vector3, radians) {
      var halfAngle, sinHalfAngle;
      halfAngle = 0.5 * radians;
      sinHalfAngle = Math.sin(halfAngle);
      return this.fromSet(vector3.x * sinHalfAngle, vector3.y * sinHalfAngle, vector3.z * sinHalfAngle, Math.cos(halfAngle));
    };

    Quaternion.prototype.toMatrix = function() {
      var di, dj, dk, ii, ij, ik, jj, jk, jr, kk, kr, xr;
      di = 2 * this.i;
      dj = 2 * this.j;
      dk = 2 * this.k;
      ii = di * this.i;
      ij = di * this.j;
      ik = di * this.k;
      xr = di * this.r;
      jj = dj * this.j;
      jk = dj * this.k;
      jr = dj * this.r;
      kr = dk * this.r;
      kk = dk * this.k;
      return Matrix4.fromSet(1 - (jj + kk), ij - kr, ik + jr, 0, ij + kr, 1 - (ii + kk), jk - xr, 0, ik - jr, jk + xr, 1 - (ii + jj), 0, 0, 0, 0, 1);
    };

    Quaternion.prototype.set = function(i1, j1, k1, r1) {
      this.i = i1;
      this.j = j1;
      this.k = k1;
      this.r = r1;
    };

    Quaternion.prototype.add = function(rhs) {
      return this.fromSet(this.i + rhs.i, this.j + rhs.j, this.k + rhs.k, this.r + rhs.r);
    };

    Quaternion.prototype.addThis = function(rhs) {
      this.i += rhs.i;
      this.j += rhs.j;
      this.k += rhs.k;
      return this.r += rhs.r;
    };

    Quaternion.prototype.sub = function(rhs) {
      return Quaternion.fromSet(this.i - rhs.i, this.j - rhs.j, this.k - rhs.k, this.r - rhs.r);
    };

    Quaternion.prototype.subThis = function(rhs) {
      this.i -= rhs.i;
      this.j -= rhs.j;
      this.k -= rhs.k;
      return this.r -= rhs.r;
    };

    Quaternion.prototype.mul = function(rhs) {
      return Quaternion.fromSet(this.r * rhs.i + this.i * rhs.r + this.j * rhs.k - this.k * rhs.j, this.r * rhs.j - this.i * rhs.k + this.j * rhs.r + this.k * rhs.i, this.r * rhs.k + this.i * rhs.j - this.j * rhs.i + this.k * rhs.r, this.r * rhs.r - this.i * rhs.i - this.j * rhs.j - this.k * rhs.k);
    };

    Quaternion.prototype.mulThis = function(rhs) {
      var i, j, k, r;
      i = this.r * rhs.i + this.i * rhs.r + this.j * rhs.k - this.k * rhs.j;
      j = this.r * rhs.j - this.i * rhs.k + this.j * rhs.r + this.k * rhs.i;
      k = this.r * rhs.k + this.i * rhs.j - this.j * rhs.i + this.k * rhs.r;
      r = this.r * rhs.r - this.i * rhs.i - this.j * rhs.j - this.k * rhs.k;
      return this.set(i, j, k, r);
    };

    Quaternion.prototype.negate = function() {
      return Quaternion.fromSet(-this.i, -this.j, -this.k, -this.r);
    };

    Quaternion.prototype.conjugate = function() {
      return Quaternion.fromSet(-this.i, -this.j, -this.k, this.r);
    };

    Quaternion.prototype.invert = function() {
      var squared, squaredInv;
      squared = this.i * this.i + this.j * this.j + this.k * this.k + this.r * this.r;
      squaredInv = 1.0 / squared;
      return Quaternion.fromSet(-this.i * squaredInv, -this.j * squaredInv, -this.k * squaredInv, this.r * squaredInv);
    };

    Quaternion.prototype.toString = function() {
      return "Quaternion [" + this.i + "," + this.j + "," + this.k + "," + this.r + "]";
    };

    return Quaternion;

  })();

  Sphere = (function() {
    function Sphere(position1, radius) {
      this.position = position1;
      this.radius = radius;
    }

    Sphere.prototype.intersects = function(otherSphere) {
      var len_sqrd, rad_sum_sqrd, to_other;
      rad_sum_sqrd = this.radius + otherSphere.radius;
      rad_sum_sqrd *= rad_sum_sqrd;
      to_other = this.position.sub(otherSphere.position);
      len_sqrd = to_other.lengthSquared();
      return len_sqrd < rad_sum_sqrd;
    };

    return Sphere;

  })();

  Transform = (function() {
    function Transform() {
      this.translation = new Vector3(0, 0, 0);
      this.rotation = new Quaternion();
      this.scaling = new Vector3(1, 1, 1);
      this.identity();
    }

    Transform.prototype.identity = function() {
      this.noTranslation();
      this.noRotation();
      return this.noScaling();
    };

    Transform.prototype.noTranslation = function() {
      return this.translation.set(0, 0, 0);
    };

    Transform.prototype.translate = function(vector3) {
      return this.translation.addThis(vector3);
    };

    Transform.prototype.translateX = function(scalar) {
      return this.translation.x += scalar;
    };

    Transform.prototype.translateY = function(scalar) {
      return this.translation.y += scalar;
    };

    Transform.prototype.translateZ = function(scalar) {
      return this.translation.z += scalar;
    };

    Transform.prototype.setTranslation = function(vector3) {
      return this.translation.setV(vector3);
    };

    Transform.prototype.setTranslationX = function(scalar) {
      return this.translation.x = scalar;
    };

    Transform.prototype.setTranslationY = function(scalar) {
      return this.translation.y = scalar;
    };

    Transform.prototype.setTranslationZ = function(scalar) {
      return this.translation.z = scalar;
    };

    Transform.prototype.noRotation = function() {
      return this.rotation = new Quaternion();
    };

    Transform.prototype.rotate = function(quat) {
      return this.rotation = quat.mul(this.rotation);
    };

    Transform.prototype.rotateX = function(radians) {
      return this.rotate(Quaternion.fromAxisAngle(Vector3.UNITX, radians));
    };

    Transform.prototype.rotateY = function(radians) {
      return this.rotate(Quaternion.fromAxisAngle(Vector3.UNITY, radians));
    };

    Transform.prototype.rotateZ = function(radians) {
      return this.rotate(Quaternion.fromAxisAngle(Vector3.UNITZ, radians));
    };

    Transform.prototype.setRotation = function(quat) {
      return this.rotation = quat;
    };

    Transform.prototype.noScaling = function() {
      return this.scaling.set(1, 1, 1);
    };

    Transform.prototype.scale = function(vector3) {
      return this.scaling.addThis(vector3);
    };

    Transform.prototype.scaleX = function(scalar) {
      return this.scaling.x += scalar;
    };

    Transform.prototype.scaleY = function(scalar) {
      return this.scaling.y += scalar;
    };

    Transform.prototype.scaleZ = function(scalar) {
      return this.scaling.z += scalar;
    };

    Transform.prototype.scaleUniform = function(scalar) {
      return this.scaling.mulThis(scalar);
    };

    Transform.prototype.setUniformScale = function(scalar) {
      return this.scaling.set(scalar, scalar, scalar);
    };

    Transform.prototype.setScale = function(vector3) {
      return this.scaling = vector3;
    };

    Transform.prototype.setScaleX = function(scalar) {
      return this.scaling.x = scalar;
    };

    Transform.prototype.setScaleY = function(scalar) {
      return this.scaling.y = scalar;
    };

    Transform.prototype.setScaleZ = function(scalar) {
      return this.scaling.z = scalar;
    };

    Transform.prototype.getMatrix = function() {
      var rotation, scaling, transform, translation;
      translation = new Matrix4();
      translation.setTranslationV(this.translation);
      rotation = this.rotation.toMatrix();
      scaling = new Matrix4();
      scaling.setScalingV(this.scaling);
      transform = rotation.mul(scaling);
      transform = translation.mul(transform);
      return transform;
    };

    return Transform;

  })();

  Vector3 = (function() {
    Vector3.UNITX = new Vector3(1, 0, 0);

    Vector3.UNITY = new Vector3(0, 1, 0);

    Vector3.UNITZ = new Vector3(0, 0, 1);

    function Vector3(x1, y1, z1) {
      this.x = x1;
      this.y = y1;
      this.z = z1;
    }

    Vector3.prototype.set = function(x1, y1, z1) {
      this.x = x1;
      this.y = y1;
      this.z = z1;
    };

    Vector3.prototype.setV = function(vector) {
      this.x = vector.x;
      this.y = vector.y;
      return this.z = vector.z;
    };

    Vector3.prototype.add = function(vector) {
      return new Vector3(this.x + vector.x, this.y + vector.y, this.z + vector.z);
    };

    Vector3.prototype.addThis = function(vector) {
      this.x += vector.x;
      this.y += vector.y;
      return this.z += vector.z;
    };

    Vector3.prototype.sub = function(vector) {
      return new Vector3(this.x - vector.x, this.y - vector.y, this.z - vector.z);
    };

    Vector3.prototype.subThis = function(vector) {
      this.x -= vector.x;
      this.y -= vector.y;
      return this.z -= vector.z;
    };

    Vector3.prototype.mul = function(scalar) {
      return new Vector3(this.x * scalar, this.y * scalar, this.z * scalar);
    };

    Vector3.prototype.mulThis = function(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this.z *= scalar;
    };

    Vector3.prototype.div = function(scalar) {
      return new Vector3(this.x / scalar, this.y / scalar, this.z / scalar);
    };

    Vector3.prototype.divThis = function(scalar) {
      this.x /= scalar;
      this.y /= scalar;
      return this.z /= scalar;
    };

    Vector3.prototype.invert = function() {
      return new Vector3(-this.x, -this.y, -this.z);
    };

    Vector3.prototype.invertThis = function() {
      this.x = -this.x;
      this.y = -this.y;
      return this.z = -this.z;
    };

    Vector3.prototype.lengthSquared = function() {
      return this.dot(this);
    };

    Vector3.prototype.length = function() {
      return Math.sqrt(lengthSquared());
    };

    Vector3.prototype.normalizeThis = function() {
      var lengthInv;
      lengthInv = 1.0 / length();
      return this.mulThis(lengthInv);
    };

    Vector3.prototype.normalize = function() {
      var vector;
      vector = new Vector3(this.x, this.y, this.z);
      return vector.normalizeThis();
    };

    Vector3.prototype.dot = function(vector) {
      return this.x * vector.x + this.y * vector.y + this.z * vector.z;
    };

    Vector3.prototype.cross = function(vector) {
      return new Vector3(this.y * vector.z - this.z * vector.y, this.z * vector.x - vector.x * this.z, this.x * vector.y - vextor.y * this.x);
    };

    Vector3.prototype.toString = function() {
      return "Vector3 [" + (this.x.toFixed(2)) + "," + (this.y.toFixed(2)) + "," + (this.z.toFixed(2)) + "]";
    };

    return Vector3;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Vector3 = Vector3;
  }

  Vector4 = (function() {
    function Vector4(x1, y1, z1, w1) {
      this.x = x1;
      this.y = y1;
      this.z = z1;
      this.w = w1;
    }

    Vector4.fromVector3 = function(vector, w) {
      return new Vector4(vector.x, vector.y, vector.z, w);
    };

    Vector4.prototype.toVector3 = function() {
      var wInv;
      if (this.w !== 0) {
        wInv = 1.0 / this.w;
        return new Vector3(this.x * wInv, this.y * wInv, this.z * wInv);
      }
      return new Vector3(this.x, this.y, this.z);
    };

    Vector4.prototype.addThis = function(vector) {
      this.x += vector.x;
      this.y += vector.y;
      this.z += vector.z;
      return this.w += vector.w;
    };

    Vector4.prototype.subThis = function(vector) {
      this.x -= vector.x;
      this.y -= vector.y;
      this.z -= vector.z;
      return this.w -= vector.w;
    };

    Vector4.prototype.mulThis = function(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this.w *= scalar;
    };

    Vector4.prototype.divThis = function(scalar) {
      var scalarInv;
      scalarInv = 1.0 / scalar;
      return mul(scalarInv);
    };

    Vector4.prototype.dot = function(vector) {
      return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
    };

    Vector4.prototype.lengthSquared = function() {
      return dot(this);
    };

    Vector4.prototype.length = function() {
      return Math.sqrt(lengthSquared());
    };

    Vector4.prototype.toString = function() {
      return "Vector4 [" + this.x + "," + this.y + "," + this.z + "," + this.w + "]";
    };

    return Vector4;

  })();

  Model = (function() {
    function Model() {
      this.vertices = new Array();
      this.indices = new Array();
      this.transform = new Transform();
      this.renderMode = "points";
      this.color = "rgb(255, 255, 255)";
    }

    Model.prototype.addVertex = function(vector3) {
      return this.vertices.push(vector3);
    };

    Model.prototype.addIndex = function(scalar) {
      return this.indices.push(scalar);
    };

    return Model;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Model = Model;
  }

  Node = (function() {
    function Node(model1) {
      this.model = model1 != null ? model1 : void 0;
      this.transform = new Transform();
      this.children = new Array();
      this.parent = null;
    }

    Node.prototype.addChild = function(childNode) {
      this.children.push(childNode);
      return childNode.parent = this;
    };

    Node.prototype.removeChild = function(childNode) {
      return this.children = this.children.filter(function(e) {
        return e !== childNode;
      });
    };

    Node.prototype.remove = function() {
      var childNode, fn, l, len, ref;
      ref = this.children;
      fn = (function(_this) {
        return function(childNode) {
          return childNode.remove;
        };
      })(this);
      for (l = 0, len = ref.length; l < len; l++) {
        childNode = ref[l];
        fn(childNode);
      }
      this.onRemove();
      if (this.parent !== null) {
        return this.parent.removeChild(this);
      }
    };

    Node.prototype.update = function(step) {
      var childNode, l, len, ref, results;
      this.onUpdate(step);
      ref = this.children;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        childNode = ref[l];
        results.push((function(_this) {
          return function(childNode) {
            return childNode.update(step);
          };
        })(this)(childNode));
      }
      return results;
    };

    Node.prototype.getWorldTransform = function() {
      if (this.parent === null) {
        return this.transform.getMatrix();
      }
      return this.parent.getWorldTransform().mul(this.transform.getMatrix());
    };

    Node.prototype.render = function(renderer) {
      var childNode, fn, l, len, ref;
      renderer.pipeline.push();
      renderer.pipeline.addTransform(this.transform.getMatrix());
      if (this.model) {
        renderer.renderModel(this.model);
      }
      ref = this.children;
      fn = (function(_this) {
        return function(childNode) {
          return childNode.render(renderer);
        };
      })(this);
      for (l = 0, len = ref.length; l < len; l++) {
        childNode = ref[l];
        fn(childNode);
      }
      return renderer.pipeline.pop();
    };

    Node.prototype.onUpdate = function(step) {};

    Node.prototype.onRemove = function() {};

    return Node;

  })();

  OrthoProjection = (function() {
    function OrthoProjection(left, right, top, bottom, near, far) {
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.matrixUpdated = true;
      this.matrix = new Matrix4();
    }

    OrthoProjection.prototype.getMatrix = function() {
      var A, B, C, h, p, w, x, y, z;
      if (this.matrixUpdated) {
        w = this.right - this.left;
        h = this.top - this.bottom;
        p = this.far - this.near;
        x = (this.right + this.left) / w;
        y = (this.top + this.bottom) / h;
        z = (this.far + this.near) / p;
        A = 2 / w;
        B = 2 / h;
        C = -2 / p;
        this.matrix.set(A, 0, 0, -x, 0, B, 0, -y, 0, 0, C, -z, 0, 0, 0, -1);
        this.matrixUpdated = false;
      }
      return this.matrix;
    };

    return OrthoProjection;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.OrthoProjection = OrthoProjection;
  }

  Pipeline = (function() {
    function Pipeline() {
      this.transformMatrix = new Matrix4();
      this.viewMatrix = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.viewportMatrix = new Matrix3();
      this.matrixStack = new Array();
    }

    Pipeline.prototype.setProjection = function(matrix) {
      this.projectionMatrix = matrix;
      return this.recalculateTransform();
    };

    Pipeline.prototype.setView = function(matrix) {
      this.viewMatrix = matrix;
      return this.recalculateTransform();
    };

    Pipeline.prototype.setViewport = function(matrix) {
      return this.viewportMatrix = matrix;
    };

    Pipeline.prototype.recalculateTransform = function() {
      return this.transformMatrix = this.projectionMatrix.mul(this.viewMatrix);
    };

    Pipeline.prototype.addTransform = function(matrix) {
      return this.transformMatrix = this.transformMatrix.mul(matrix);
    };

    Pipeline.prototype.push = function() {
      return this.matrixStack.push(this.transformMatrix);
    };

    Pipeline.prototype.pop = function() {
      return this.transformMatrix = this.matrixStack.pop();
    };

    Pipeline.prototype.transform = function(vector3) {
      var vector3Proj, vector3View, vector4, vector4Proj;
      vector4 = Vector4.fromVector3(vector3, 1);
      vector4Proj = this.transformMatrix.transform(vector4);
      vector3Proj = vector4Proj.toVector3();
      vector3View = this.viewportMatrix.transform(vector3Proj);
      return vector3View;
    };

    return Pipeline;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Pipeline = Pipeline;
  }

  Projection = (function() {
    function Projection(viewWidth, viewHeight, near, far, fov) {
      this.viewWidth = viewWidth;
      this.viewHeight = viewHeight;
      this.near = near;
      this.far = far;
      this.fov = fov;
      this.matrixUpdated = true;
      this.matrix = new Matrix4();
    }

    Projection.prototype.setView = function(viewWidth, viewHeight) {
      this.viewWidth = viewWidth;
      this.viewHeight = viewHeight;
      return this.matrixUpdated = true;
    };

    Projection.prototype.setNearFar = function(near, far) {
      this.near = near;
      this.far = far;
      return this.matrixUpdated = true;
    };

    Projection.prototype.setFov = function(fov) {
      this.fov = fov;
      return this.matrixUpdated;
    };

    Projection.prototype.getMatrix = function() {
      var A, F, K, L, aspect, farNearInv;
      if (this.matrixUpdated) {
        aspect = this.viewHeight / this.viewWidth;
        farNearInv = 1.0 / (this.far - this.near);
        A = 1.0 / Math.tan(0.5 * this.fov * Math.PI / 360.0);
        F = A / aspect;
        K = -(this.far + this.near) * farNearInv;
        L = -2.0 * this.far * this.near * farNearInv;
        this.matrix.set(A, 0, 0, 0, 0, F, 0, 0, 0, 0, K, L, 0, 0, -1, 0);
        this.matrixUpdated = false;
      }
      return this.matrix;
    };

    return Projection;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Projection = Projection;
  }

  Renderer = (function() {
    Renderer.RED = 'rgba(255,0,0,0.5)';

    Renderer.GREEN = 'rgba(0,255,0,0.5)';

    Renderer.BLUE = '#00F';

    Renderer.WHITE = '#FFF';

    Renderer.BLACK = '#000';

    function Renderer() {
      var halfHeight, halfWidth, projection, ref, ref1, ref2, ref3, ref4, ref5, viewMatrix, viewportMatrix;
      this.canvas = typeof $ === "function" ? $('#canvas') : void 0;
      this.context = (ref = this.canvas) != null ? ref.get(0).getContext('2d') : void 0;
      if ((ref1 = this.context) != null) {
        ref1.font = '400 16px/2 Unknown Font, sans-serif';
      }
      if ((ref2 = this.context) != null) {
        ref2.lineWidth = 1;
      }
      if ((ref3 = this.context) != null) {
        ref3.lineCap = 'butt';
      }
      this.width = ((ref4 = this.canvas) != null ? ref4.width() : void 0) || 1;
      this.height = ((ref5 = this.canvas) != null ? ref5.height() : void 0) || 1;
      projection = new Projection(this.width, this.height, 0.00001, 1000, 75.0);
      viewMatrix = new Matrix4();
      halfWidth = this.width / 2;
      halfHeight = this.height / 2;
      viewportMatrix = new Matrix3();
      viewportMatrix.set(halfWidth, 0, 0, 0, -halfHeight, 0, halfWidth, halfHeight, 1);
      this.pipeline = new Pipeline();
      this.pipeline.setProjection(projection.getMatrix());
      this.pipeline.setView(viewMatrix);
      this.pipeline.setViewport(viewportMatrix);
    }

    Renderer.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.width, this.height);
    };

    Renderer.prototype.drawPixel = function(x, y, color) {
      if (this.context == null) {
        return;
      }
      this.context.save();
      this.context.fillStyle = color;
      this.context.fillRect(x - 1, y - 1, 3, 3);
      return this.context.restore();
    };

    Renderer.prototype.drawText = function(x, y, string, color) {
      if (this.context == null) {
        return;
      }
      this.context.save();
      if (color == null) {
        color = Renderer.WHITE;
      }
      this.context.fillStyle = color;
      this.context.fillText(string, x, y);
      return this.context.restore();
    };

    Renderer.prototype.drawLine = function(fromX, fromY, toX, toY, color) {
      if (this.context == null) {
        return;
      }
      this.context.save();
      this.context.beginPath();
      this.context.strokeStyle = color;
      this.context.moveTo(fromX, fromY);
      this.context.lineTo(toX, toY);
      this.context.stroke();
      return this.context.restore();
    };

    Renderer.prototype.renderModel = function(model) {
      switch (model.renderMode) {
        case "points":
          return this.renderPoints(model);
        case "lines":
          return this.renderLines(model);
      }
    };

    Renderer.prototype.renderPoints = function(model) {
      var l, len, point, ref, results;
      ref = model.indices;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        point = ref[l];
        results.push((function(_this) {
          return function(point) {
            var position;
            position = _this.pipeline.transform(model.vertices[point]);
            return _this.drawPixel(position.x, position.y, model.color);
          };
        })(this)(point));
      }
      return results;
    };

    Renderer.prototype.renderLines = function(model) {
      var count, currentLine, line, p1, p2, results;
      count = model.indices.length;
      line = 0;
      results = [];
      while (line < count) {
        currentLine = line;
        line += 2;
        p1 = this.pipeline.transform(model.vertices[model.indices[currentLine]]);
        if (p1.z < 0 || p1.z > 1) {
          continue;
        }
        p2 = this.pipeline.transform(model.vertices[model.indices[currentLine + 1]]);
        if (p2.z < 0 || p2.z > 1) {
          continue;
        }
        results.push(this.drawLine(p1.x, p1.y, p2.x, p2.y, model.color));
      }
      return results;
    };

    return Renderer;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    exports.Renderer = Renderer;
  }

  BackgroundMountainsModel = (function(superClass) {
    extend(BackgroundMountainsModel, superClass);

    function BackgroundMountainsModel() {
      var a, c, l, o, r, ref;
      BackgroundMountainsModel.__super__.constructor.apply(this, arguments);
      this.color = Renderer.BLUE;
      this.renderMode = "lines";
      r = 400;
      o = r / 2;
      c = 0;
      for (a = l = 0, ref = 2 * Math.PI; l < ref; a = l += 0.1) {
        this.addVertex(new Vector3(r * Math.cos(a) - o, Math.random() * 20, r * Math.sin(a) - o));
        if (c > 0) {
          this.indices.push(c);
        }
        this.indices.push(c++);
      }
      this.indices.pop();
      this.indices.push(c - 1);
      this.indices.push(0);
    }

    return BackgroundMountainsModel;

  })(Model);

  BackgroundHorizonModel = (function(superClass) {
    extend(BackgroundHorizonModel, superClass);

    function BackgroundHorizonModel() {
      var a, c, l, o, r, ref;
      BackgroundHorizonModel.__super__.constructor.apply(this, arguments);
      this.color = Renderer.BLUE;
      this.renderMode = "lines";
      r = 400;
      o = r / 2;
      c = 0;
      for (a = l = 0, ref = 2 * Math.PI; l < ref; a = l += 0.1) {
        this.addVertex(new Vector3(r * Math.cos(a) - o, 0, r * Math.sin(a) - o));
        if (c > 0) {
          this.indices.push(c);
        }
        this.indices.push(c++);
      }
      this.indices.pop();
      this.indices.push(c - 1);
      this.indices.push(0);
    }

    return BackgroundHorizonModel;

  })(Model);

  BattleZone = (function() {
    BattleZone.MOVESPEED = 20;

    BattleZone.ROTATIONSPEED = 0.7;

    BattleZone.TANKCOLLIDER = new Sphere(new Vector3(0, 2, 0), 3.5);

    BattleZone.BULLETCOLLIDER = new Sphere(new Vector3(0, 0, 0), 1.0);

    function BattleZone() {
      this.update = bind(this.update, this);
      this.onKeyDown = bind(this.onKeyDown, this);
      this.onKeyUp = bind(this.onKeyUp, this);
      var i, l, now, tank;
      this.renderer = new Renderer();
      this.hud = new Hud();
      this.rootNode = new Node();
      this.skyboxNode = new Node();
      this.sceneNode = new Node();
      this.cameraRotationNode = new Node();
      this.cameraTranslationNode = new Node();
      this.position = new Vector3(0, 3, 30);
      this.rotation = 0;
      this.cameraTranslationNode.addChild(this.sceneNode);
      this.cameraRotationNode.addChild(this.cameraTranslationNode);
      this.rootNode.addChild(this.skyboxNode);
      this.rootNode.addChild(this.cameraRotationNode);
      this.skyboxNode.addChild(new Node(new BackgroundHorizonModel));
      this.skyboxNode.addChild(new Node(new BackgroundMountainsModel));
      this.tanks = new Array();
      this.bullets = new Array();
      for (i = l = 0; l < 100; i = ++l) {
        tank = new TankNode();
        tank.transform.translateX(Math.floor(Math.random() * 600) - 300);
        tank.transform.translateZ(Math.floor(Math.random() * 600) - 300);
        this.sceneNode.addChild(tank);
        this.tanks.push(tank);
      }
      this.mainTank = new TankNode;
      this.sceneNode.addChild(this.mainTank);
      this.sceneNode.addChild(new Node(new AxisModel));
      this.tanks.push(this.mainTank);
      this.moveForward = false;
      this.moveBackward = false;
      this.moveLeft = false;
      this.moveRight = false;
      this.moveUp = false;
      this.moveDown = false;
      this.shoot = false;
      $(document).bind('keydown', this.onKeyDown);
      $(document).bind('keyup', this.onKeyUp);
      now = new Date().getTime();
      this.last = now + 50;
      this.intervalID = setInterval(this.update, 50);
    }

    BattleZone.prototype.onKeyUp = function(key) {
      key.preventDefault();
      switch (key.keyCode) {
        case 37:
          return this.moveLeft = false;
        case 39:
          return this.moveRight = false;
        case 38:
          return this.moveForward = false;
        case 40:
          return this.moveBackward = false;
        case 65:
          return this.moveUp = false;
        case 90:
          return this.moveDown = false;
        case 32:
          return this.shoot = false;
      }
    };

    BattleZone.prototype.onKeyDown = function(key) {
      key.preventDefault();
      switch (key.keyCode) {
        case 37:
          return this.moveLeft = true;
        case 39:
          return this.moveRight = true;
        case 38:
          return this.moveForward = true;
        case 40:
          return this.moveBackward = true;
        case 65:
          return this.moveUp = true;
        case 90:
          return this.moveDown = true;
        case 32:
          return this.shoot = true;
      }
    };

    BattleZone.prototype.update = function() {
      var bullet, bulletCollider, bulletColliderPosition, direction, l, len, len1, m, move_delta, now, ref, ref1, rotationQuat, step, tank, tankCollider, tankColliderPosition, x;
      now = new Date().getTime();
      step = (now - this.last) * 0.001;
      this.last = now;
      if (this.moveLeft) {
        this.rotation += -step * BattleZone.ROTATIONSPEED;
      }
      if (this.moveRight) {
        this.rotation += step * BattleZone.ROTATIONSPEED;
      }
      if (this.moveForward) {
        move_delta = -step * BattleZone.MOVESPEED;
        this.position.x += -Math.sin(this.rotation) * move_delta;
        this.position.z += Math.cos(this.rotation) * move_delta;
      }
      if (this.moveBackward) {
        move_delta = step * BattleZone.MOVESPEED;
        this.position.x += -Math.sin(this.rotation) * move_delta;
        this.position.z += Math.cos(this.rotation) * move_delta;
      }
      if (this.moveUp) {
        this.position.addThis(Vector3.UNITY.mul(step * BattleZone.MOVESPEED));
      }
      if (this.moveDown) {
        this.position.addThis(Vector3.UNITY.mul(-step * BattleZone.MOVESPEED));
      }
      if (this.shoot) {
        direction = new Vector3(Math.sin(this.rotation), 0, -Math.cos(this.rotation));
        bullet = new BulletNode(direction);
        bullet.transform.setTranslation(this.position);
        bullet.transform.rotateY(-this.rotation);
        this.sceneNode.addChild(bullet);
        this.bullets.push(bullet);
        this.shoot = false;
      }
      this.renderer.clear();
      this.renderer.drawText(10, 20, this.position);
      rotationQuat = Quaternion.fromAxisAngle(Vector3.UNITY, this.rotation);
      this.cameraTranslationNode.transform.setTranslation(this.position.invert());
      this.cameraRotationNode.transform.setRotation(rotationQuat);
      this.skyboxNode.transform.setRotation(rotationQuat);
      this.rootNode.update(step);
      this.rootNode.render(this.renderer);
      this.hud.render(this.renderer);
      ref = this.bullets;
      for (l = 0, len = ref.length; l < len; l++) {
        bullet = ref[l];
        bulletColliderPosition = bullet.getWorldTransform().transformVector3(BattleZone.BULLETCOLLIDER.position);
        bulletCollider = new Sphere(bulletColliderPosition, BattleZone.BULLETCOLLIDER.radius);
        ref1 = this.tanks;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          tank = ref1[m];
          tankColliderPosition = tank.getWorldTransform().transformVector3(BattleZone.TANKCOLLIDER.position);
          tankCollider = new Sphere(tankColliderPosition, BattleZone.TANKCOLLIDER.radius);
          if (bulletCollider.intersects(tankCollider)) {
            console.log("hit!");
            this.tanks = (function() {
              var len2, n, ref2, results;
              ref2 = this.tanks;
              results = [];
              for (n = 0, len2 = ref2.length; n < len2; n++) {
                x = ref2[n];
                if (x !== tank) {
                  results.push(x);
                }
              }
              return results;
            }).call(this);
            tank.remove();
            this.bullets = (function() {
              var len2, n, ref2, results;
              ref2 = this.bullets;
              results = [];
              for (n = 0, len2 = ref2.length; n < len2; n++) {
                x = ref2[n];
                if (x !== bullet) {
                  results.push(x);
                }
              }
              return results;
            }).call(this);
            bullet.remove();
          }
        }
      }
      return true;
    };

    return BattleZone;

  })();

  AxisModel = (function(superClass) {
    extend(AxisModel, superClass);

    function AxisModel() {
      AxisModel.__super__.constructor.apply(this, arguments);
      this.renderMode = "lines";
      this.addVertex(new Vector3(0, 0, 0));
      this.addVertex(new Vector3(1, 0, 0));
      this.addVertex(new Vector3(0, 1, 0));
      this.addVertex(new Vector3(0, 0, -1));
      this.indices = [0, 1, 0, 2, 0, 3];
    }

    return AxisModel;

  })(Model);

  Tester = (function() {
    function Tester() {
      var i, renderer, res;
      renderer = new Renderer();
      i = -2;
      while (i < -1) {
        res = renderer.pipeline.transform(new Vector3(1, 0, i));
        if (res.z > -1 && res.z < 1) {
          alert(res);
        }
        i += 0.01;
      }
    }

    return Tester;

  })();

  if (typeof $ === "function") {
    $(function() {
      return new BattleZone();
    });
  }

  BulletNode = (function(superClass) {
    extend(BulletNode, superClass);

    function BulletNode(direction1) {
      this.direction = direction1;
      BulletNode.__super__.constructor.call(this, new BulletModel);
      this.transform.setUniformScale(0.8);
      this.timeOut = 4.0;
    }

    BulletNode.prototype.onUpdate = function(step) {
      var move_step;
      move_step = step * 100;
      this.transform.translate(this.direction.mul(move_step));
      this.timeOut -= step;
      if (this.timeOut <= 0) {
        return this.remove();
      }
    };

    return BulletNode;

  })(Node);

  BulletModel = (function(superClass) {
    extend(BulletModel, superClass);

    function BulletModel() {
      BulletModel.__super__.constructor.apply(this, arguments);
      this.color = Renderer.RED;
      this.renderMode = "lines";
      this.addVertex(new Vector3(1, 1, 1));
      this.addVertex(new Vector3(-1, 1, 1));
      this.addVertex(new Vector3(-1, -1, 1));
      this.addVertex(new Vector3(1, -1, 1));
      this.addVertex(new Vector3(1, 1, -1));
      this.addVertex(new Vector3(-1, 1, -1));
      this.addVertex(new Vector3(-1, -1, -1));
      this.addVertex(new Vector3(1, -1, -1));
      this.indices = [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7];
    }

    return BulletModel;

  })(Model);

  Hud = (function() {
    function Hud() {
      this.hasTarget = false;
    }

    Hud.prototype.render = function(renderer) {
      var c_x, c_y, color, o_w, o_y;
      c_x = renderer.width * 0.5;
      c_y = renderer.height * 0.5;
      o_y = 40;
      o_w = 40;
      color = "red";
      if (this.hasTarget) {
        renderer.drawLine(c_x, c_y - o_y - 30, c_x, c_y - o_y, color);
        renderer.drawLine(c_x - o_w, c_y - o_y, c_x + o_w, c_y - o_y, color);
        renderer.drawLine(c_x - o_w, c_y - o_y, c_x - o_w + 20, c_y - o_y + 20, color);
        renderer.drawLine(c_x + o_w, c_y - o_y, c_x + o_w - 20, c_y - o_y + 20, color);
        renderer.drawLine(c_x, c_y + o_y + 30, c_x, c_y + o_y, color);
        renderer.drawLine(c_x - o_w, c_y + o_y, c_x + o_w, c_y + o_y, color);
        renderer.drawLine(c_x - o_w, c_y + o_y, c_x - o_w + 20, c_y + o_y - 20, color);
        return renderer.drawLine(c_x + o_w, c_y + o_y, c_x + o_w - 20, c_y + o_y - 20, color);
      } else {
        renderer.drawLine(c_x, c_y - o_y - 30, c_x, c_y - o_y, color);
        renderer.drawLine(c_x - o_w, c_y - o_y, c_x + o_w, c_y - o_y, color);
        renderer.drawLine(c_x - o_w, c_y - o_y, c_x - o_w, c_y - o_y + 20, color);
        renderer.drawLine(c_x + o_w, c_y - o_y, c_x + o_w, c_y - o_y + 20, color);
        renderer.drawLine(c_x, c_y + o_y + 30, c_x, c_y + o_y, color);
        renderer.drawLine(c_x - o_w, c_y + o_y, c_x + o_w, c_y + o_y, color);
        renderer.drawLine(c_x - o_w, c_y + o_y, c_x - o_w, c_y + o_y - 20, color);
        return renderer.drawLine(c_x + o_w, c_y + o_y, c_x + o_w, c_y + o_y - 20, color);
      }
    };

    return Hud;

  })();

  ModelLoader = (function() {
    function ModelLoader() {}

    ModelLoader.FromString = function(modelData) {
      var done, i, index, indexArray, j, l, lastIndex, lastWord, len, line, lines, m, model, n, ref, ref1, v1, v2, v3, words;
      model = new Model();
      model.renderMode = "lines";
      lines = modelData.split("\n");
      done = 0;
      for (l = 0, len = lines.length; l < len; l++) {
        line = lines[l];
        words = line.split(" ");
        if (words.length === 4 && words[0] === "v") {
          v1 = parseFloat(words[1]);
          v2 = parseFloat(words[2]);
          v3 = parseFloat(words[3]);
          if (!isNaN(v1) && !isNaN(v2) && !isNaN(v3)) {
            model.addVertex(new Vector3(v1, v2, v3));
          }
        } else if (words.length > 0 && words[0] === "f") {
          indexArray = new Array();
          lastWord = words.length - 1;
          for (i = m = 1, ref = lastWord; m <= ref; i = m += 1) {
            index = parseInt(words[i]) - 1;
            if (!isNaN(index)) {
              indexArray.push(index);
            }
          }
          lastIndex = indexArray.length - 1;
          if (lastIndex > 0) {
            model.addIndex(indexArray[0]);
            for (j = n = 1, ref1 = lastIndex; n <= ref1; j = n += 1) {
              model.addIndex(indexArray[j]);
              model.addIndex(indexArray[j]);
            }
            model.addIndex(indexArray[0]);
          }
        } else if (words.length === 2 && words[0] === "color") {
          model.color = words[1];
        }
      }
      return model;
    };

    return ModelLoader;

  })();

  _sphereData = "v 0.000000 -1.000000 0.000000\nv 0.723607 -0.447220 0.525725\nv -0.276388 -0.447220 0.850649\nv -0.894426 -0.447216 0.000000\nv -0.276388 -0.447220 -0.850649\nv 0.723607 -0.447220 -0.525725\nv 0.276388 0.447220 0.850649\nv -0.723607 0.447220 0.525725\nv -0.723607 0.447220 -0.525725\nv 0.276388 0.447220 -0.850649\nv 0.894426 0.447216 0.000000\nv 0.000000 1.000000 0.000000\nv -0.162456 -0.850654 0.499995\nv 0.425323 -0.850654 0.309011\nv 0.262869 -0.525738 0.809012\nv 0.850648 -0.525736 0.000000\nv 0.425323 -0.850654 -0.309011\nv -0.525730 -0.850652 0.000000\nv -0.688189 -0.525736 0.499997\nv -0.162456 -0.850654 -0.499995\nv -0.688189 -0.525736 -0.499997\nv 0.262869 -0.525738 -0.809012\nv 0.951058 0.000000 0.309013\nv 0.951058 0.000000 -0.309013\nv 0.000000 0.000000 1.000000\nv 0.587786 0.000000 0.809017\nv -0.951058 0.000000 0.309013\nv -0.587786 0.000000 0.809017\nv -0.587786 0.000000 -0.809017\nv -0.951058 0.000000 -0.309013\nv 0.587786 0.000000 -0.809017\nv 0.000000 0.000000 -1.000000\nv 0.688189 0.525736 0.499997\nv -0.262869 0.525738 0.809012\nv -0.850648 0.525736 0.000000\nv -0.262869 0.525738 -0.809012\nv 0.688189 0.525736 -0.499997\nv 0.162456 0.850654 0.499995\nv 0.525730 0.850652 0.000000\nv -0.425323 0.850654 0.309011\nv -0.425323 0.850654 -0.309011\nv 0.162456 0.850654 -0.499995\ns off\nf 1 14 13\nf 2 14 16\nf 1 13 18\nf 1 18 20\nf 1 20 17\nf 2 16 23\nf 3 15 25\nf 4 19 27\nf 5 21 29\nf 6 22 31\nf 2 23 26\nf 3 25 28\nf 4 27 30\nf 5 29 32\nf 6 31 24\nf 7 33 38\nf 8 34 40\nf 9 35 41\nf 10 36 42\nf 11 37 39\nf 39 42 12\nf 39 37 42\nf 37 10 42\nf 42 41 12\nf 42 36 41\nf 36 9 41\nf 41 40 12\nf 41 35 40\nf 35 8 40\nf 40 38 12\nf 40 34 38\nf 34 7 38\nf 38 39 12\nf 38 33 39\nf 33 11 39\nf 24 37 11\nf 24 31 37\nf 31 10 37\nf 32 36 10\nf 32 29 36\nf 29 9 36\nf 30 35 9\nf 30 27 35\nf 27 8 35\nf 28 34 8\nf 28 25 34\nf 25 7 34\nf 26 33 7\nf 26 23 33\nf 23 11 33\nf 31 32 10\nf 31 22 32\nf 22 5 32\nf 29 30 9\nf 29 21 30\nf 21 4 30\nf 27 28 8\nf 27 19 28\nf 19 3 28\nf 25 26 7\nf 25 15 26\nf 15 2 26\nf 23 24 11\nf 23 16 24\nf 16 6 24\nf 17 22 6\nf 17 20 22\nf 20 5 22\nf 20 21 5\nf 20 18 21\nf 18 4 21\nf 18 19 4\nf 18 13 19\nf 13 3 19\nf 16 17 6\nf 16 14 17\nf 14 1 17\nf 13 15 3\nf 13 14 15\nf 14 2 15\ncolor yellow";

  _chunkData = "v 1.000000 -1.801402 -0.181684\nv 0.701757 -1.531042 0.553599\nv -0.699188 -0.564975 1.000000\nv -0.198348 -1.000000 -0.181684\nv 1.000000 -0.031305 -0.999999\nv 0.861835 1.000000 0.553599\nv -1.000000 1.257215 1.000000\nv -0.348469 1.257215 -1.000000\nf 1 2 3 4\nf 5 8 7 6\nf 1 5 6 2\nf 2 6 7 3\nf 3 7 8 4\nf 5 1 4 8\ncolor rgba(0,255,0,0.5)";

  _barrelChunkData = "v 0.400000 -0.400000 -2.400000\nv 0.400000 -0.400000 2.400000\nv -0.400000 -0.400000 2.400000\nv -0.400000 -0.400000 -2.400001\nv 0.400000 0.400000 -2.399999\nv 0.400000 0.400000 2.400002\nv -0.400000 0.400000 2.399999\nv -0.400000 0.400000 -2.400000\ns off\nf 1 2 3 4\nf 5 8 7 6\nf 1 5 6 2\nf 2 6 7 3\nf 3 7 8 4\nf 5 1 4 8\ncolor rgba(0,255,0,0.5)";

  _bodyChunkData = "v 1.391201 0.138464 -2.378028\nv 0.772186 -0.190991 2.591757\nv -1.541497 -0.190991 2.591757\nv -1.316740 -0.190991 -1.704921\nv 0.943804 0.723951 -1.330382\nv 1.330382 1.015484 1.330384\nv -0.962500 0.573402 1.478070\nv -1.330383 1.015484 -1.330383\nv 1.397104 0.412246 1.879145\nv 1.118006 -0.190991 0.106865\nv -1.397104 0.412246 -1.854206\nv -1.330383 1.015484 -0.000000\nv -1.397105 0.412246 2.146230\nv -1.463826 -0.190991 0.106864\ns off\nf 1 10 2 3 14 4\nf 5 8 12 7 6\nf 1 5 6 9 2 10\nf 2 9 6 7 13 3\nf 3 13 7 12 8 11 4 14\nf 5 1 4 11 8\ncolor rgba(0,255,0,0.5)";

  _tankRadarData = "v 1.000000 0.700000 0.200000\nv 1.000000 0.700000 0.400000\nv -1.000000 0.700000 0.400000\nv -1.000000 0.700000 0.200000\nv 1.000000 1.500000 0.200001\nv 0.999999 1.500000 0.400001\nv -1.000000 1.500000 0.400000\nv -1.000000 1.500000 0.200000\nv -2.000000 0.700000 -1.000000\nv -2.000000 1.500000 -1.000000\nv 2.000000 0.800000 -1.000000\nv 2.000000 1.500000 -0.999999\nv 1.000000 1.800000 -0.199999\nv 0.999999 1.800000 0.000001\nv -1.000000 1.800000 -0.200000\nv -1.000000 1.800000 -0.000000\nv 0.200000 0.400000 -0.200000\nv 0.200000 0.400000 0.200000\nv -0.200000 0.400000 -0.200000\nv -0.200000 0.400000 0.200000\nv 0.000000 0.000000 -0.200000\nv 0.000000 0.400000 -0.200000\nv 0.173205 0.000000 -0.100000\nv 0.173205 0.400000 -0.100000\nv 0.173205 0.000000 0.100000\nv 0.173205 0.400000 0.100000\nv -0.000000 0.000000 0.200000\nv -0.000000 0.400000 0.200000\nv -0.173205 0.000000 0.100000\nv -0.173205 0.400000 0.100000\nv -0.173205 0.000000 -0.100000\nv -0.173205 0.400000 -0.100000\ns off\nf 2 3 20 18\nf 7 6 14 16\nf 19 20 9\nf 2 6 7 3\nf 5 1 4 8\nf 3 7 10 9\nf 1 5 12 11\nf 13 15 16 14\nf 5 8 15 13\nf 9 4 19\nf 17 18 20 19\nf 4 1 17 19\nf 13 14 12\nf 6 2 11 12\nf 3 9 20\nf 6 12 14\nf 12 5 13\nf 8 4 9 10\nf 8 10 15\nf 10 7 16\nf 16 15 10\nf 1 11 17\nf 18 17 11\nf 11 2 18\nf 21 22 24 23\nf 23 24 26 25\nf 25 26 28 27\nf 27 28 30 29\nf 24 22 32 30 28 26\nf 31 32 22 21\nf 29 30 32 31\nf 21 23 25 27 29 31\ncolor rgba(255,0,0,0.5)";

  Models = (function() {
    function Models() {}

    Models.Sphere = ModelLoader.FromString(_sphereData);

    Models.Chunk = ModelLoader.FromString(_chunkData);

    Models.BarrelChunk = ModelLoader.FromString(_barrelChunkData);

    Models.BodyChunk = ModelLoader.FromString(_bodyChunkData);

    Models.TankRadar = ModelLoader.FromString(_tankRadarData);

    return Models;

  })();

  GRAVITY = new Vector3(0, -4, 0);

  MOVESPEED = 0.2;

  ROTATIONSPEED = 0.3;

  TankNode = (function(superClass) {
    extend(TankNode, superClass);

    function TankNode() {
      TankNode.__super__.constructor.call(this, new TankBodyModel);
      this.radarNode = new Node(Models.TankRadar);
      this.radarNode.transform.translate(new Vector3(0, 4, 1));
      this.radarNode.transform.setUniformScale(0.6);
      this.addChild(this.radarNode);
      this.trankRotation = Math.random() * Math.PI * 2;
      this.transform.setRotation(Quaternion.fromAxisAngle(Vector3.UNITY, this.trankRotation));
      this.stateTimer = Math.random() * 2 + 1;
      this.rotate = Math.random() * ROTATIONSPEED * 2 - ROTATIONSPEED;
    }

    TankNode.prototype.onUpdate = function(step) {
      var moveTranslation;
      this.radarNode.transform.rotateY(step * 1);
      moveTranslation = new Vector3(-Math.sin(this.trankRotation) * MOVESPEED, 0.0, -Math.cos(this.trankRotation) * MOVESPEED);
      this.transform.translate(moveTranslation);
      this.stateTimer -= step;
      if (this.stateTimer <= 0) {
        this.stateTimer = Math.random() * 2 + 1;
        this.rotate = Math.random() * ROTATIONSPEED * 2 - ROTATIONSPEED;
      }
      this.trankRotation += this.rotate * step;
      return this.transform.setRotation(Quaternion.fromAxisAngle(Vector3.UNITY, this.trankRotation));
    };

    TankNode.prototype.onRemove = function() {
      var chunk, root;
      if (this.parent !== null) {
        root = new Node();
        root.transform.setTranslation(this.transform.translation);
        root.transform.setRotation(Quaternion.fromAxisAngle(Vector3.UNITY, this.trankRotation));
        this.parent.addChild(root);
        chunk = new TankChunkNode(Models.Chunk, 1.0);
        chunk.transform.setUniformScale(1.2);
        chunk.transform.translate(new Vector3(0, 2.5, 0));
        root.addChild(chunk);
        chunk = new TankChunkNode(Models.BarrelChunk, 1.0);
        chunk.transform.setUniformScale(0.9);
        chunk.transform.translate(new Vector3(0, 3, -4));
        root.addChild(chunk);
        chunk = new TankChunkNode(Models.BodyChunk, 0.5);
        chunk.transform.setUniformScale(1.8);
        chunk.transform.translate(new Vector3(0, 0, 0));
        root.addChild(chunk);
        chunk = new TankChunkNode(Models.TankRadar, 2.0);
        chunk.transform.setUniformScale(0.6);
        chunk.transform.translate(new Vector3(0, 4, 1));
        return root.addChild(chunk);
      }
    };

    return TankNode;

  })(Node);

  TankChunkNode = (function(superClass) {
    extend(TankChunkNode, superClass);

    function TankChunkNode(model, forceMultiplier) {
      if (forceMultiplier == null) {
        forceMultiplier = 1;
      }
      TankChunkNode.__super__.constructor.call(this, model);
      this.velocity = new Vector3(Math.random() * 4.0 - 2.0, Math.random() * 2 + 4, Math.random() * 4.0 - 2.0);
      this.rotationX = Math.random() * 5.0 - 2.5;
      this.rotationY = Math.random() * 5.0 - 2.5;
      this.rotationZ = Math.random() * 5.0 - 2.5;
      this.velocity.x *= forceMultiplier;
      this.velocity.y += this.velocity.y * (forceMultiplier - 1) * 0.25;
      this.velocity.z *= forceMultiplier;
      this.rotationX *= forceMultiplier;
      this.rotationY *= forceMultiplier;
      this.rotationZ *= forceMultiplier;
    }

    TankChunkNode.prototype.onUpdate = function(step) {
      this.transform.rotateX(step * this.rotationX);
      this.transform.rotateY(step * this.rotationY);
      this.transform.rotateZ(step * this.rotationZ);
      this.velocity.addThis(GRAVITY.mul(step));
      this.transform.translate(this.velocity.mul(step));
      if (this.transform.translation.y <= -1.0) {
        return this.remove();
      }
    };

    return TankChunkNode;

  })(Node);

  TankRadarModel = (function(superClass) {
    extend(TankRadarModel, superClass);

    function TankRadarModel() {
      TankRadarModel.__super__.constructor.apply(this, arguments);
      this.color = Renderer.RED;
      this.renderMode = "lines";
      this.addVertex(new Vector3(0, 0, 0));
      this.addVertex(new Vector3(0, 0.5, 0));
      this.addVertex(new Vector3(1, 0.5, 0));
      this.addVertex(new Vector3(-1, 0.5, 0));
      this.addVertex(new Vector3(1, 1.5, 0));
      this.addVertex(new Vector3(-1, 1.5, 0));
      this.indices = [0, 1, 1, 2, 1, 3, 2, 4, 3, 5, 4, 5, 4, 3, 5, 2];
    }

    return TankRadarModel;

  })(Model);

  TankBodyModel = (function(superClass) {
    extend(TankBodyModel, superClass);

    function TankBodyModel() {
      TankBodyModel.__super__.constructor.apply(this, arguments);
      this.color = Renderer.GREEN;
      this.renderMode = "lines";
      this.addVertex(new Vector3(-3, 0, -5));
      this.addVertex(new Vector3(3, 0, -5));
      this.addVertex(new Vector3(3, 0, 5));
      this.addVertex(new Vector3(-3, 0, 5));
      this.addVertex(new Vector3(-2.5, 2, -2));
      this.addVertex(new Vector3(2.5, 2, -2));
      this.addVertex(new Vector3(2.5, 2, 4));
      this.addVertex(new Vector3(-2.5, 2, 4));
      this.addVertex(new Vector3(-1.5, 2, -1));
      this.addVertex(new Vector3(1.5, 2, -1));
      this.addVertex(new Vector3(1.5, 2, 3));
      this.addVertex(new Vector3(-1.5, 2, 3));
      this.addVertex(new Vector3(-1.5, 4, -1));
      this.addVertex(new Vector3(1.5, 4, -1));
      this.addVertex(new Vector3(1.5, 4, 3));
      this.addVertex(new Vector3(-1.5, 4, 3));
      this.addVertex(new Vector3(-0.4, 2.6, -1));
      this.addVertex(new Vector3(0.4, 2.6, -1));
      this.addVertex(new Vector3(0.4, 3.4, -1));
      this.addVertex(new Vector3(-0.4, 3.4, -1));
      this.addVertex(new Vector3(-0.4, 2.6, -7));
      this.addVertex(new Vector3(0.4, 2.6, -7));
      this.addVertex(new Vector3(0.4, 3.4, -7));
      this.addVertex(new Vector3(-0.4, 3.4, -7));
      this.indices = [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7, 8, 9, 9, 10, 10, 11, 11, 8, 12, 13, 13, 14, 14, 15, 15, 12, 8, 12, 9, 13, 10, 14, 11, 15, 16, 17, 17, 18, 18, 19, 19, 16, 20, 21, 21, 22, 22, 23, 23, 20, 16, 20, 17, 21, 18, 22, 19, 23];
    }

    return TankBodyModel;

  })(Model);

}).call(this);
